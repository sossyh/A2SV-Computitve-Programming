from typing import List
from collections import defaultdict
from collections import deque

class Solution:
    def minimumTime(self, n : int,m : int, edges : List[List[int]]) -> int:
        time = [0] * n
        graph = defaultdict(list)
        queue = deque()
        incoming = defaultdict(int)
        
        for pre, task in edges:
            graph[pre].append(task)
            incoming[task] += 1
        
        for i in range(1, n+1):
            if incoming[i] == 0:
                queue.append(i)
                time[i-1] = 1
        
        level = 1
        while queue:
            for i in range(len(queue)):
                item = queue.popleft()
                for i in graph[item]:
                    incoming[i] -= 1
                    
                    if incoming[i] == 0:
                        time[i-1] = level + 1
                        queue.append(i)
            level += 1
        
        for i in range(len(time)):
            time[i] = str(time[i])
            
        return " ".join(time)
            
